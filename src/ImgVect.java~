import java.util.Arrays;
import java.util.stream.DoubleStream;

public class ImgVect implements Comparable<ImgVect> {

    private final int MAX_IMG;
    private int contatoreImmagini;
    private Forma[] vetForme;

    public ImgVect(int MAX_IMG) {
        this.MAX_IMG = MAX_IMG;
        this.contatoreImmagini = 0;
        this.vetForme = new Forma[MAX_IMG];
    }

    public int getContatoreImmagini() {
        return contatoreImmagini;
    }

    public void aggiungiForma(Forma nuovaForma) {
        if(this.contatoreImmagini < this.MAX_IMG) {
            this.vetForme[this.contatoreImmagini] = nuovaForma;
            this.contatoreImmagini++;
        }
        else {
            System.out.println("Raggiunto il numero massimo di forme.");
        }
    }

    public double getAreaTotale() {
        double AreaTotale = 0.;
        for(int i = 0; i < contatoreImmagini; i++) {
            AreaTotale += this.vetForme[i].getArea();
        }
        return AreaTotale;
    }

    public double getPerimetroTotale() {
        double PerimetroTotale = 0.;
        for(int i = 0; i < contatoreImmagini; i++) {
            PerimetroTotale += this.vetForme[i].getPerimetro();
        }
        return PerimetroTotale;
    }

    public double getAreaColore(Colore colore) {
        double AreaColore = 0.;
        for(int i = 0; i < contatoreImmagini; i++) {
            if(this.vetForme[i].getColore() == colore) {
                AreaColore += this.vetForme[i].getArea();
            }
        }
        return AreaColore;
    }

    public double getPerimetroColore(Colore colore) {
        double PerimetroColore = 0.;
        for(int i = 0; i < contatoreImmagini; i++) {
            if(this.vetForme[i].getColore() == colore) {
                PerimetroColore += this.vetForme[i].getPerimetro();
            }
        }
        return PerimetroColore;
    }

    public void stampaForme() {
        for(int i = 0; i < contatoreImmagini; i++) {
            System.out.println(vetForme[i]);
        }
    }

    public void ordinaImmagini() {
        Arrays.sort(vetForme, 0, contatoreImmagini);
    }

    public int compareTo(ImgVect img) {
        if (this.getAreaTotale() > img.getAreaTotale()){
            return 1;
        }
        else if (this.getAreaTotale() < img.getAreaTotale()){
            return -1;
        }
        return 0;
    }

    @Override
    public String toString() {
        String s ="";
        for(int i = 0; i < this.vetForme.length; i++) {
            if(this.vetForme[i] != null) {
                s += this.vetForme[i];
                s += "\n";
            }
        }
        return s;
    }

}
